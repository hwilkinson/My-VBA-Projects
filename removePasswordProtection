Option Base 1

Function ProtectedVBProject(ByRef wb As Workbook) As Boolean    ' returns TRUE if the VB project in the active document is protected
  Dim VBC As Integer
  VBC = -1
  On Error Resume Next
  VBC = wb.VBProject.VBComponents.Count
  On Error GoTo 0 
  If VBC = -1 Then
    ProtectedVBProject = True
  Else
    ProtectedVBProject = False
  End If 
End Function

--------------------------------------------------------------------------------------------------------
Sub GeneralSub()
  Dim CopyFname As Variant
  Dim FileNameFolder As Variant
  ChDir (Environ("USERPROFILE") & "\Desktop")
  
  ' Select the file
  Fname = Application.GetOpenFilename(filefilter:="Excel files (*.xlsm), *.xlsm", MultiSelect:=False)
  
  ' Check if file selected
  If Fname = False Then
    Exit Sub
  End If
  
  ' Check if workBook has password for opening
  On Error Resume Next
  Dim tmpWB As Workbook
  Set tmpWB = Workbooks.Open(Fname, ReadOnly:=True, Password:="")
  If Err.Number > 0 Then
    MsgBox "Selected Workbook is encrypted (Password required to open file)!" & vbCrLf & "This program doesn't works with such files.", vbCritical, "VBA Unlocker"
    Exit Sub
  End If
  On Error GoTo 0
  
  ' Check if WorkBook is in Shared mode
  If tmpWB.MultiUserEditing = True Then        ''Close WorkBook140     tmpWB.Close saveChanges:=False150     MsgBox "Selected Workbook is in Shared Mode!" & vbCrLf & "Please change mode to Exclusive (non Shared) and try again", vbExclamation, "VBA Unlocker"160     Exit Sub170   End If       ''Check if VBProjec protected180   ProjectProtected = ProtectedVBProject(tmpWB)       ''Close WorkBook190   tmpWB.Close saveChanges:=False200   Set tmpWB = Nothing       '' Check if converting to ZIP is required210   If ProjectProtected Then             ''Create Scripting Object              Dim FSO As Object220           Set FSO = CreateObject("scripting.filesystemobject")                           'Copy the file with .zip extension230           CopyFname = Left(Fname, Len(Fname) - 4) & "zip"240           LastSeparatorPos = Len(CopyFname) - InStr(1, StrReverse(CopyFname), CStr(Application.PathSeparator), vbTextCompare) + 1250           CopyFname = Left(CopyFname, LastSeparatorPos) & "Unlocked_" & Right(CopyFname, Len(CopyFname) - LastSeparatorPos)             260           FSO.CopyFile Fname, CopyFname, True                           ''Path to tmp folder270           FileNameFolder = Environ("tmp") & "\UnlockFolderTMP"                           ''Delete if previous files exists280           If FSO.FolderExists(FileNameFolder & "\") Then290              FSO.deletefolder FileNameFolder300           End If                           'Make the tmp folder in User tmp310           FSO.CreateFolder FileNameFolder320   End If        Dim OutMSG As String330   OutMSG = ""         'Check whether WorkBook has VBA Project protection340   If ProjectProtected = True Then350      OutMSG = ChangePasswordForVBA(CopyFname, FileNameFolder)360   Else370      OutMSG = "Selected WorkBook has no VBA Project protection."380   End If         ''Check if returning to previous state is required390   If ProjectProtected Then              ''Delete tmp files--------------------------400           If FSO.FolderExists(FileNameFolder & "\") Then410              FSO.deletefolder FileNameFolder420           End If                           ''Change extension to .xlsm430           CopyFname_unlocked = Left(CopyFname, Len(CopyFname) - 3) & "xlsm"                             ''Delete file with the same name if exists440           If FSO.FileExists(CopyFname_unlocked) Then450             FSO.DeleteFile CopyFname_unlocked, True460           End If                           ''Rename back to .xlsm file470           FSO.MoveFile CopyFname, CopyFname_unlocked480           Set FSO = Nothing490   End If   500   MsgBox OutMSG, vbInformation, "VBA Unlocker" End Sub  Function ChangePasswordForVBA(CopyFname As Variant, FileNameFolder As Variant) As String       'Object for work with ZIP file10    Set oApp = CreateObject("Shell.Application")       ''Set to false20    ProjectFileFound = False       ''Cycle trought Zip archive30    For Each fileNameInZip In oApp.Namespace(CopyFname).items             'find 'xl' folder40        If fileNameInZip = "xl" Then             'find vbaProject.bin50           For Each subFile In fileNameInZip.Getfolder.items                  'extract 'vbaProject.bin' file60                If subFile = "vbaProject.bin" Then                         ''Move bin file to tmp folder70                      oApp.Namespace(FileNameFolder).movehere subFile80                      ProjectFileFound = True90                      Exit For100               End If110          Next120       End If130   Next       ''HASH for Password = 'macro'      Dim PasswordString As String140   PasswordString = "282A84CBA1CBA1345FCCB154E20721DE77F7D2378D0EAC90427A22021A46E9CE6F17188A"        ''if VbaProject exists150   If ProjectFileFound = True Then160       tmpMSG = ""170       tmpMSG = ChangeDPBValue(FileNameFolder & "\vbaProject.bin", PasswordString) ''DPB change                          ''Overwirte existing vbaProject.bin file180       oApp.Namespace(CopyFname).items.Item("xl").Getfolder.CopyHere FileNameFolder & "\vbaProject.bin"                           'Keep script waiting until Compressing is done190       On Error Resume Next200       Do Until oApp.Namespace(CopyFname).items.Item("xl").Getfolder.items.Item("vbaProject.bin").Name = "vbaProject.bin"210           Application.Wait (Now + TimeValue("0:00:01"))220       Loop230       On Error GoTo 0         240       If tmpMSG = "" Then250           ChangePasswordForVBA = "Password for VbaProject: 'macro'" & vbNewLine & "Unlocked file is saved with 'Unlocked_' prefix in same directory." & vbNewLine & "Open file and use new password to edit macros."260       Else270           ChangePasswordForVBA = tmpMSG280       End If         290   Else300       ChangePasswordForVBA = "No VbaProject found in this file!"310   End If 320   Set oApp = Nothing End Function Function ChangeDPBValue(PathToBinFile As String, HASHPassword As String) As String       ''Dim adoStream As ADODB.Stream      ''Dim adoBin As ADODB.Stream       Dim PasswordArrayByte() As Byte 10    Set adoStream = CreateObject("ADODB.Stream")20    Set adoBin = CreateObject("ADODB.Stream") 30    ReDim PasswordArrayByte(Len(HASHPassword))       ''Convert String to byte40    For i = 1 To Len(HASHPassword)50      PasswordArrayByte(i) = Asc(Mid(HASHPassword, i, 1))60    Next i       ''Read TXT data fine 'DPB' value70    With adoStream80        .Mode = 3 'adModeReadWrite90        .Type = 2 'adTypeText  ' adTypeBinary100       .Charset = "us-ascii"110       .Open120       .LoadFromFile (PathToBinFile)130       bytes = .ReadText                   ''Find Start of Value pos140       StartPosVal = InStr(1, bytes, "DPB=", vbTextCompare) + 5                   ''IF there is no DPB value150       If StartPosVal = 5 Then160           .Close170           Set adoStream = Nothing180           Set adoBin = Nothing190           ChangeDPBValue = "VBA Protection Not found"200           Exit Function210       End If                    ''Find End of Value pos220       EndPosVal = InStr(StartPosVal, bytes, """", vbTextCompare) - 1           'Define lenght230       ValLength = EndPosVal - StartPosVal + 1         240       If Len(HASHPassword) < ValLength Then              'add additional '0' if coded password is longer250          ReDim Preserve PasswordArrayByte(Len(HASHPassword) + ValLength - Len(HASHPassword))            260          For i = Len(HASHPassword) + 1 To UBound(PasswordArrayByte)270             PasswordArrayByte(i) = Asc(0)280          Next i290       End If             300       .Close310   End With       ''Read binary data320   With adoStream330       .Mode = 3 'adModeReadWrite340       .Type = 1 'adTypeBinary350       .Open360       .LoadFromFile (PathToBinFile)                     ''Create empty stream object370       With adoBin380           .Mode = 3 'adModeReadWrite390           .Type = 1 'adTypeBinary400           .Open410       End With                    'copy first part of bytes (till start of 'DPB' value)420       .Position = 0430       .CopyTo adoBin, StartPosVal - 1                   'copy new DPB value440        adoBin.Write (PasswordArrayByte)           'copy remaining part of bytes (after 'DPB' value)450       .Position = EndPosVal  ''Set position to remaining part460       .CopyTo adoBin           'save to file470       adoBin.SaveToFile PathToBinFile, 2 'adSaveCreateOverWrite480       adoBin.Close         490       .Close500   End With 510   Set adoStream = Nothing520   Set adoBin = Nothing530   ChangeDPBValue = "" End Function
 
